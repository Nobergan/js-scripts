/*
 * Array.prototype.reduce()
 * –ü–æ—ç–ª–µ–º–µ–Ω—Ç–æ –ø–µ—Ä–µ–±–∏—Ä–∞–µ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –º–∞—Å—Å–∏–≤
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —á—Ç–æ —É–≥–æ–¥–Ω–æ ü§Ø
 * –ó–∞–º–µ–Ω—è–µ—Ç –≤—Å—ë –Ω–∞ —Å–≤–µ—Ç–µ, –Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω—É–∂–Ω–æ —Å —É–º–æ–º
 */

// –æ—Ç–∫—Ä–æ–π—Ç–µ –∑–∞–≤–µ—Å—É —Ç–∞–π–Ω—ã –ø–æ—á–µ–º—É reduce –º–µ–¥–ª–µ–Ω–Ω—ã–π –∏ –≤ —á–µ–º –∫–æ–Ω—Ü–µ–ø—Ç—É–∞–ª—å–Ω–∞—è —Ä–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É reduce –∏ map, –∫—Ä–æ–º–µ –º–Ω–æ–≥–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∞cc. –∞reduce –∫–∞—Å—Ç–æ–º–Ω—ã–π –±—É–¥–µ—Ç?

const numbers = [5, 10, 15, 20, 25];

const total = numbers.reduce((acc, number) => acc + number, 0);

// accumulator = 0 -> number = 5 -> return 0 + 5
// accumulator = 5 -> number = 10 -> return 5 + 10
// accumulator = 15 -> number = 15 -> return 15 + 15
// accumulator = 30 -> number = 20 -> return 30 + 20
// accumulator = 50 -> number = 25 -> return 50 + 25

console.log(total);

/*
 * –°—á–∏—Ç–∞–µ–º –æ–±—â—É—é –∑–∞—Ä–ø–ª–∞—Ç—É
 */

const salary = {
  mango: 100,
  poly: 50,
  ajax: 150,
};

// const values = Object.values(salary);

// const totalSalary = values.reduce((acc, value) => acc + value, 0);

// console.log(totalSalary);

const totalSalary = Object.values(salary).reduce(
  (acc, value) => acc + value,
  0,
);

console.log(totalSalary);

/*
 * –°—á–∏—Ç–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤
 */

const players = [
  { id: 'player-1', name: 'Mango', timePlayed: 310, online: false },
  { id: 'player-2', name: 'Poly', timePlayed: 470, online: true },
  { id: 'player-3', name: 'Kiwi', timePlayed: 230, online: true },
  { id: 'player-4', name: 'Ajax', timePlayed: 150, online: false },
  { id: 'player-5', name: 'Chelsey', timePlayed: 80, online: true },
];

const totalTimePlayed = players.reduce(
  (time, player) => time + player.timePlayed,
  0,
);

console.log(totalTimePlayed);

/*
 * –°—á–∏—Ç–∞–µ–º –æ–±—â—É—é —Å—É–º–º—É —Ç–æ–≤–∞—Ä–æ–≤ –∫–æ—Ä–∑–∏–Ω—ã
 */

const cart = [
  { label: 'Apples', price: 100, quantity: 2 },
  { label: 'Bananas', price: 120, quantity: 3 },
  { label: 'Lemons', price: 70, quantity: 4 },
];

const totalAmount = cart.reduce(
  (total, item) => total + item.price * item.quantity,
  0,
);

console.log(totalAmount);

/*
 * –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Ç–µ–≥–∏ –∏–∑ —Ç–≤–∏—Ç–æ–≤
 */

const tweets = [
  { id: '000', likes: 5, tags: ['js', 'nodejs'] },
  { id: '001', likes: 2, tags: ['html', 'css'] },
  { id: '002', likes: 17, tags: ['html', 'js', 'nodejs'] },
  { id: '003', likes: 8, tags: ['css', 'react'] },
  { id: '004', likes: 0, tags: ['js', 'nodejs', 'react'] },
];

const allTags = tweets.reduce((tags, tweet) => {
  tags.push(...tweet.tags);

  return tags;
}, []);

console.log(allTags);

/*
 * –í–µ–¥—ë–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–µ–≥–æ–≤
 */

// const tagsStats = allTags.reduce((acc, tag) => {
//   console.log('TAG: ', tag);
//   console.log('ACC: ', acc);

//   if (acc.hasOwnProperty(tag)) {
//     console.log('—Ç–∞–∫–æ–µ —Å–≤–æ–π—Å—Ç–≤–æ –µ—Å—Ç—å, —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ');

//     acc[tag] += 1;

//     return acc;
//   }

//   console.log('–¢–∞–∫–æ–≥–æ —Å–≤–æ–π—Å—Ç–≤–∞ –Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –Ω–∞ –æ–±—å–µ–∫—Ç');

//   acc[tag] = 1;

//   return acc;
// }, {});

// –ì—Ä—è–∑–Ω–∞—è –≤–µ—Ä—Å–∏—è, –º—É—Ç–∏—Ä—É–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–¥–µ—Ç –≤ acc
// const tagsStats = allTags.reduce((acc, tag) => {
//   acc[tag] = acc.hasOwnProperty(tag) ? acc[tag] + 1 : 1;

//   return acc;
// }, {});

// –ß–∏—Å—Ç–∞—è –≤–µ—Ä—Å–∏—è, –∫–∞–∂–¥—ã–π —Ä–∞–∑ —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –æ–±—å–µ–∫—Ç
const tagsStats = allTags.reduce(function (acc, tag) {
  return {
    ...acc,
    [tag]: acc.hasOwnProperty(tag) ? acc[tag] + 1 : 1,
  };
}, {});

console.log(tagsStats);

/*
 * Reduce —Å–≤–æ–∏–º–∏ —Ä—É–∫–∞–º–∏
 */

// Array.prototype.reduce = function(callback, initialValue = this[0]) {
//   let accumulator = initialValue;

//   for (let i = 0; i < this.length; i += 1) {
//     accumulator = callback(accumulator, this[i], i, this);
//   }

//   return accumulator;
// };

/*
 * Array.prototype.sort()
 * –°–æ—Ä—Ç–∏—Ä—É–µ—Ç –∏ –ò–ó–ú–ï–ù–Ø–ï–¢ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –º–∞—Å—Å–∏–≤
 */

const numbersTwo = [1, 9, 6, 2, 3];

// numbersTwo.sort((prev, next) => prev - next);
// console.log(numbersTwo);

const letters = ['b', 'B', 'a', 'A'];

letters.sort();
console.log(letters);

/*
 * –ö–∞–∫ —Å–¥–µ–ª–∞—Ç—å –∫–æ–ø–∏—é –º–∞—Å—Å–∏–≤–∞ —á—Ç–æ–±—ã –Ω–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π
 */

// const copy = numbersTwo.slice();

const copy = [...numbersTwo].sort();

console.log(numbersTwo);
console.log(copy);

/*
 * –ö–∞—Å—Ç–æ–º–Ω–∞—è —Å–ª–æ–∂–Ω—ã—Ö —Ç–∏–ø–æ–≤
 */
const playersTwo = [
  { id: 'player-1', name: 'Mango', timePlayed: 310, online: false },
  { id: 'player-2', name: 'Poly', timePlayed: 470, online: true },
  { id: 'player-3', name: 'Kiwi', timePlayed: 230, online: true },
  { id: 'player-4', name: 'Ajax', timePlayed: 150, online: false },
  { id: 'player-5', name: 'Chelsey', timePlayed: 80, online: true },
];

const sortedByTopPlayers = [...playersTwo].sort(
  (prevPlayer, nextPlayer) => prevPlayer.timePlayed - nextPlayer.timePlayed,
);
console.table(sortedByTopPlayers);

const sortedByWorstPlayers = [...playersTwo].sort(
  (prevPlayer, nextPlayer) => nextPlayer.timePlayed - prevPlayer.timePlayed,
);
console.table(sortedByWorstPlayers);

/*
 * –¶–µ–ø–æ—á–∫–∏ –≤—ã–∑–æ–≤–æ–≤ - chaining
 */

const numbersThree = [1, 5, 2, 4, 3];

const result = numbersThree
  .filter(number => number > 2)
  .map(number => number * 5)
  .sort((prev, next) => prev - next);

console.log(result);

/*
 * –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–µ—Ö –∫—Ç–æ –æ–Ω–ª–∞–π–Ω –ø–æ —Ä–∞–Ω–≥—É
 */
const playersThree = [
  { id: 'id-1', tag: 'Mango', isOnline: true, rank: 800 },
  { id: 'id-2', tag: 'Poly', isOnline: false, rank: 600 },
  { id: 'id-3', tag: 'Ajax', isOnline: true, rank: 100 },
  { id: 'id-4', tag: 'Kiwi', isOnline: true, rank: 400 },
];

const onlineAndSorted = playersThree
  .filter(player => player.isOnline)
  .sort((prevPlayer, nextPlayer) => prevPlayer.rank - nextPlayer.rank);

console.table(onlineAndSorted);

/*
 * Chaining –≤ –º–µ—Ç–æ–¥–∞—Ö –æ–±—Ç–µ–∫—Ç–∞ –∫–∞–∫ jquery
 */

const element = {
  class: '',
  hovered: false,
  changeClass(cls) {
    this.class = cls;

    return this;
  },
  toggleHovered() {
    this.hovered = !this.hovered;
  },
};

element.changeClass('open').toggleHovered();
console.log(element);
